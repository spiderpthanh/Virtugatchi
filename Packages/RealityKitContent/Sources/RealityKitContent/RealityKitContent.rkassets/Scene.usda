#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["GridMaterial", "Ball_2", "Material", "Ball_1"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )

    def "GridMaterial" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "GridMaterial"
        {
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "MaterialXPreviewSurface"
            {
                float2 ui:nodegraph:node:size = (207.5, 307)
            }

            over "Remap"
            {
                float2 ui:nodegraph:node:size = (94, 181)
            }

            over "Fractional"
            {
                float2 ui:nodegraph:node:size = (154.5, 109)
            }

            over "Multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Combine3"
            {
                float2 ui:nodegraph:node:size = (145, 54)
            }

            over "Subtract"
            {
                float2 ui:nodegraph:node:size = (61.5, 36)
            }

            over "Absval"
            {
                float2 ui:nodegraph:node:size = (121.5, 53)
            }

            over "BaseColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
            }

            over "LineColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
            }

            over "LineCounts"
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
            }

            over "LineWidths"
            {
                float2 ui:nodegraph:node:size = (150, 53)
            }

            over "Separate2"
            {
                float2 ui:nodegraph:node:size = (115, 127)
            }

            over "Min"
            {
                float2 ui:nodegraph:node:size = (113, 40)
            }

            over "Range"
            {
                float2 ui:nodegraph:node:size = (98, 217)
            }
        }
    }

    def Sphere "Ball_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.045, 0, 0.0004)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                float radius = 0.05
                token shapeType = "Sphere"
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }
    }

    def Sphere "Ball_2" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.05
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.045, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                float radius = 0.05
                token shapeType = "Sphere"
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }
    }
}

def Material "Material"
{
    token outputs:mtlx:surface.connect = </Material/PreviewSurface.outputs:out>
    token outputs:realitykit:vertex
    token outputs:surface.connect = </Material/UsdPreviewSurface.outputs:surface>
    float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
    float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

    def Shader "UsdPreviewSurface" (
        active = true
    )
    {
        uniform token info:id = "UsdPreviewSurface"
        float inputs:clearcoat = 0
        color3f inputs:diffuseColor = (0.7963272, 0.64525074, 0.47848192) (
            colorSpace = "srgb_displayp3"
        )
        float inputs:roughness = 0.25
        token outputs:surface
    }

    def Shader "PreviewSurface" (
        active = false
    )
    {
        uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
        token outputs:out
        float2 ui:nodegraph:node:pos = (-255, 105)
        float2 ui:nodegraph:node:size = (148.5, 199)
    }
}

